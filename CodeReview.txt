                                                                                                         Code Review On Expense Tracker


1. Main File -> App.js - Control flow initiates from here:
  . Sets up initial list of expenses
  . Manages a function for creating a merged list of all the old as and newly added expenses
  . Calls the NewExpense component using function reference
  . Passes in newExpense to the <Expenses /> component.

2. First checkpoint of control flow (temporary) -> Expense.js:
  . Manages change in filter year through handleFilterChange()
  . Takes inputYear entered and sets it as the FilteredYear
  . Extracts filteredYear from the expense list passed in as props from App.js and saves in filteredExpense 
    and checks whether it is equal to the year entered
  . Calls <ExpenseFilter /> component by passing the default or the newly selected filteredYear along with a function reference
    to handle year changing
  . Calls <ExpensesChart /> component and passes filteredExpense i.e the extracted yearfrom the entered item list
  . Finally calls <ExpenseList /> component and passes the filtered year from the input list

3. Card.js -> Card component that forms the outline of every component

4. ExpenseFilter.js -> Handles year wise filtering of expenses:
  . Manages a handleDropDownChange() function that sets the entered year as the input year and passes it to the Expenses.js file using the functional     reference that it gets from the props of the Expense.js file.
  .  The files also renders a dropdown which enables the user to filter a year to view its expenses

5.  ExpenseChart.js -> The initial file wich builds the data for the year chart:
  . It has all the data points with year labels and their values
  . From the props it extracts every single expense and further extracts the month to get the expenseMonth
  . It adds new entry for that month into the already created DataPoints array by indexing that month and adding the new amount and finally renders the     DataPoints as a chart (using some fancy CSS)

6.  ExpenseList.js -> Creates a new object in the expense array everytime a new entry is added:
  .  It takes props as the full 4 digit year in string format and checks for the length of the string. If empty no expenses are found 
  . It returns a newly created list with the latest entry made by mapping over the data passed through props and sending them as props to the    <ExpenseItem /> component

7. ExpenseItem.js -> Renders the extracted date, name and the amount for the latest entry:
  . Takes the name, amount and the date as props from the ExpenseList.js
  . Calls the <ExpenseDate /> component as passes date as props and renders the other two

8. ExpenseDate.js -> Manipulates and modifies the date format
  . Convert the incoming date (from props) to a specific format
  . Renders the day, month and year

9. Chart.js -> Uses incoming props form ExpenseChart.js and passes it to create chartbar
  . Creates anew array [dataPointsValueToCalculateMax] that stores all the values from the incoming props 
  . Calculates maximum value from all the entered values
  . Calls the <ChartBar /> component and passes on the information about the max value for that month and all the month labels to render 

10. ChartBar.js -> Renders the code for creating the chartbar with accurate amount and month
  . Sets the barFillHeight with the actual amount incoming via props
  . Styles the height of the bar (made from css) to match the calculated barFillHeight

11. NewExpense.js

   